# docker-compose.yml - For Cloudflare/RepoCloud.io delegated SSL or local development
version: "3.8"

services:
  # TimescaleDB (PostgreSQL with TimescaleDB extension)
  db:
    image: timescale/timescaledb-ha:pg17
    restart: unless-stopped
    ports:
      - "5432:5432" # Expose PostgreSQL port to host
    environment:
      # These variables are read from your .env file
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Ensure PostgreSQL initializes properly
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - db_data:/home/postgres/pgdata/data # Persistent storage for database data
      - ./src/schema/schema.sql:/docker-entrypoint-initdb.d/init.sql # Initialize schema
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} && psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c 'SELECT 1 FROM offers LIMIT 1;' > /dev/null 2>&1",
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s # Give more time for initialization

  # Your Node.js Fastify Application
  app:
    build: . # Build from the Dockerfile in the current directory
    restart: unless-stopped
    ports:
      - "3001:${PORT:-3001}" # Map host port 3001 to container port (default 3001)
      - "${PORT:-3001}:${PORT:-3001}" # Map host port 3001 to container port 3001 (for direct access)
    environment:
      - NODE_ENV=${NODE_ENV} # Read from .env
      - DATA_DIR=${DATA_DIR} # Read from .env (for your app's data)
      - PORT=${PORT:-3001} # Read from .env, with default
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - VENDOR_NAME=${VENDOR_NAME}
      - SERVER_DOMAIN=${SERVER_DOMAIN} # Read from .env
      - SANITY_CHECK_ENV=${SANITY_CHECK_ENV} # Read from .env
      - CHAIN_NAME=${CHAIN_NAME} # Read from .env
      - CHAIN_ID_DEC=${CHAIN_ID_DEC} # Read from .env
      - RPC_ENDPOINT=${RPC_ENDPOINT} # Read from .env
      - USDC_ADDRESS=${USDC_ADDRESS} # Read from .env
      - VENDOR_ID=${VENDOR_ID} # Read from .env
      - VENDOR_TREASURY_ADDRESS=${VENDOR_TREASURY_ADDRESS} # Read from .env
      - VENDOR_GAS_TANK_ADDRESS=${VENDOR_GAS_TANK_ADDRESS} # Read from .env
      - VENDOR_GAS_TANK_PRIVATE_KEY=${VENDOR_GAS_TANK_PRIVATE_KEY} # Read from .env
      - DATABASE_URL=${DATABASE_URL} # Read from .env
      - CHAIN_EXPLORER_URL=${CHAIN_EXPLORER_URL} # Read from .env
      - DEFAULT_BLOCK_CONFIRMATIONS=${DEFAULT_BLOCK_CONFIRMATIONS} # Read from .env
      - BILLING_BUCKET_NAME=${BILLING_BUCKET_NAME}
      # Database connection string for your Node.js app
      # IMPORTANT: Use the service name 'db' as the hostname for inter-container communication
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - app_data:/data # Persistent storage for your application's data (e.g., /data/drives)
    depends_on:
      db:
        condition: service_healthy # Ensure database is ready before app starts

volumes:
  app_data:
    driver: local # Docker managed volume for app data
  db_data:
    driver: local # Docker managed volume for database data
    name: vendor_db_volume
