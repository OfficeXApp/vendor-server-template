import { DriveID, JobRunID, JobRunStatus, UserID } from "@officexapp/types";
import { v4 as uuidv4 } from "uuid";

export enum IDPrefixEnum {
  CustomerPurchase = "CustomerPurchaseID_",
  DepositWallet = "DepositWalletID_",
  Offer = "OfferID_",
}

export const GenerateID = {
  CustomerPurchase: () => `${IDPrefixEnum.CustomerPurchase}${uuidv4()}`,
  DepositWallet: () => `${IDPrefixEnum.DepositWallet}${uuidv4()}`,
  Offer: () => `${IDPrefixEnum.Offer}${uuidv4()}`,
};

export type CustomerPurchaseID = string;
export type DepositWalletID = string;
export type OfferID = OfferSKU;

export enum OfferSKU {
  AmazonS3Disk_01 = "OfferID_AmazonS3Disk_01",
  GeminiAPIKey_01 = "OfferID_GeminiAPIKey_01",
  DMailAccount_01 = "OfferID_DMailAccount_01",
}

// deposit wallets can get created before a purchase
// deposit wallets can get abandoned on checkout
// this reside in postgres
export interface DepositWallet {
  id: DepositWalletID;
  title: string;
  description: string;
  evm_address: string;
  private_key: string;
  seed_phrase: string;
  latest_usd_balance: number; // 6 decimals
  created_at: number;
  updated_at: number;
  offer_id: OfferID;
  tracer?: string;
  metadata?: Record<string, any>; // Changed from 'string' to 'Record<string, any>' for JSONB
  purchase_id?: CustomerPurchaseID;
  offramp_evm_address?: string;
}

// this resides in postgres
export interface Offer {
  id: OfferID;
  sku: OfferSKU;
  title: string;
  description: string;
  created_at: number;
  updated_at: number;
  metadata?: Record<string, any>; // Changed from 'JSON' to 'Record<string, any>' for JSONB
}

// this resides in postgres
export interface CustomerPurchase {
  id: CustomerPurchaseID;
  wallet_id: DepositWalletID;
  customer_purchase_id: JobRunID;
  title: string;
  status: JobRunStatus;
  description: string;
  customer_user_id: UserID;
  customer_org_id: DriveID;
  customer_org_endpoint: string;
  customer_org_api_key: string;
  vendor_id: UserID;
  pricing: Record<string, any>; // Changed from 'string' to 'Record<string, any>' for JSONB
  customer_check_billing_api_key: string;
  vendor_update_billing_api_key: string;
  vendor_notes: string;
  balance: number;
  balance_low_trigger: number;
  balance_critical_trigger: number;
  balance_termination_trigger: number;
  created_at: number;
  updated_at: number;
  tracer?: string;
  metadata?: Record<string, any>; // Changed from 'string' to 'Record<string, any>' for JSONB
}

// this is simply saved as a json file, not in database
export interface AboutVendor {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  endpoint: string;
}

// Define a type for UsageRecord that includes the auto-generated 'id'
// and uses Date for timestamp for easier handling in JS
export interface UsageRecord {
  id?: number; // Auto-generated by DB
  purchase_id: CustomerPurchaseID;
  timestamp: Date; // Use Date object for TIMESTAMPTZ
  usage_amount: number;
  unit: string;
  cost_incurred: number;
  description?: string;
  metadata?: Record<string, any>; // JSONB type
}

// Interface for historical billing report results
export interface HistoricalBillingEntry {
  time_bucket: Date; // The start of the time bucket
  total_usage_amount: number;
  total_cost_incurred: number;
  purchase_id: CustomerPurchaseID;
}
